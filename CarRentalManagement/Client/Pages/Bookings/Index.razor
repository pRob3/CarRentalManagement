@page "/bookings/"
@inject HttpClient _client
@inject IJSRuntime _js
@implements IDisposable
@attribute [Authorize]

<HeadingComponent Text="Bookings" />

<a href="/bookings/create" class="btn btn-secondary m-3">
	<span class="oi oi-plus"></span>
	Add New
</a>

@if(Model == null)
{
	<div class="alert alert-info">Loading...</div>
}
else
{
<table class="table" id="bookingsTable">
	<thead>
		<tr>
			<th>Customer Tax Id</th>
			<th>Date</th>
			<th>Duration</th>
			<th>Actions</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in Model)
		{
			<tr>
				<td>@item.Customer.TaxId</td>
				<td>@item.DateCreated.Date</td>
                <td>
                    @(item.DateIn != null ? (item.DateIn.Value - item.DateOut).TotalDays.ToString() : "To Be Determined")
                </td>
				<td>
					<a href="/bookings/view/@item.Id" class="btn btn-primary">
						 <span class="oi oi-book"></span>
					 </a>
					<a href="/bookings/edit/@item.Id" class="btn btn-warning">
						 <span class="oi oi-pencil"></span>
					 </a>
					<button class="btn btn-danger" @onclick="@(()=>Delete(item.Id))">
						  <span class="oi oi-delete"></span>
					</button>
				</td>
			</tr>
		}
	</tbody>
</table>
}

@code {
    private List<Booking> Model;

    protected async override Task OnInitializedAsync()
    {
        Model = await _client.GetFromJsonAsync<List<Booking>>($"{Endpoints.BookingsEndpoint}");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await _js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
    }

    public void Dispose()
    {
        _js.InvokeVoidAsync("DataTablesDispose", "#bookingsTable");
    }

    private async Task Delete(int id)
    {
        var model = Model.First(q => q.Id == id);

        var confirm = await _js.InvokeAsync<bool>("confirm", $"Do you want to delete { model.Id }?");
        if(confirm)
        {
            await _client.DeleteAsync($"{Endpoints.BookingsEndpoint}/{id}");
            await OnInitializedAsync();
        }
    }
}