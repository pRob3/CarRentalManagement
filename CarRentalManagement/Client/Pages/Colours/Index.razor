@page "/colours/"
@inject HttpClient _client
@inject IJSRuntime _js
@attribute [Authorize]

<h3 class="card-title">Colours</h3>
<hr />
<br />
<a href="/colours/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Add New
</a>


@if(Model == null)
{
	<div class="alert alert-info">Loading...</div>
}
else
{
<table class="table table-responsive">
	<thead>
		<tr>
			<th>Name</th>
			<th>Actions</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in Model)
		{
			<tr>
				<td>@item.Name</td>
				<td>
					<a href="/colours/view/@item.Id" class="btn btn-primary">
						 <span class="oi oi-book"></span>
					 </a>
					<a href="/colours/edit/@item.Id" class="btn btn-warning">
						 <span class="oi oi-pencil"></span>
					 </a>
					<button class="btn btn-danger" @onclick="@(()=>Delete(item.Id))">
						  <span class="oi oi-delete"></span>
					</button>
				</td>
			</tr>
		}
	</tbody>
</table>
}

@code {
	private List<Colour> Model;

	protected async override Task OnInitializedAsync()
	{
		Model = await _client.GetFromJsonAsync<List<Colour>>($"{Endpoints.ColoursEndpoint}");
	}

	private async Task Delete(int id)
	{
		var model = Model.FirstOrDefault(q => q.Id == id);

		var confirm = await _js.InvokeAsync<bool>("confirm", $"Do you want to delete { model.Name }?");
		if(confirm)
		{
			await _client.DeleteAsync($"{Endpoints.ColoursEndpoint}/{id}");
			await OnInitializedAsync();
		}
	}
}
