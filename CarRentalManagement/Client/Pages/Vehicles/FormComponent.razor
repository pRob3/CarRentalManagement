@inject HttpClient _client
<EditForm Model="@vehicle" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">

        <div class="form-group">
            <label>Image (Optional):</label>
            <div>
                <InputFile OnChange="HandleFileSelection" />
                <p class="text-danger">@UploadFileWarning</p>
            </div>
        </div>

        <div class="form-group">
            <label>Make: </label>
            <div>
                <select @bind="vehicle.MakeId" class="form-control">
                    <option value="">-- Select Make --</option>
                    @if (makes != null)
                    {
                        foreach (var make in makes)
                        {
                            <option value="@make.Id">@make.Name</option>
                        }
                    }
                </select>
                <ValidationMessage For="@(() => vehicle.MakeId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Model: </label>
            <div>
                <select @bind="vehicle.ModelId" class="form-control">
                    <option value="">-- Select Model --</option>
                    @if (models != null)
                    {
                        foreach (var model in models)
                        {
                            <option value="@model.Id">@model.Name</option>
                        }
                    }
                </select>
                <ValidationMessage For="@(() => vehicle.ModelId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Colour: </label>
            <div>
                <select @bind="vehicle.ColourId" class="form-control">
                    <option value="">-- Select Colour --</option>
                    @if (colours != null)
                    {
                        foreach (var colour in colours)
                        {
                            <option value="@colour.Id">@colour.Name</option>
                        }
                    }
                </select>
                <ValidationMessage For="@(() => vehicle.ModelId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Year:</label>
            <div>
                <InputNumber @bind-Value="@vehicle.Year" class="form-control" />
                <ValidationMessage For="@(() => vehicle.Year)" />
            </div>
        </div>
        <div class="form-group">
            <label>License Plate Number:</label>
            <div>
                <InputText @bind-Value="@vehicle.LicensePlateNumber" class="form-control" />
                <ValidationMessage For="@(() => vehicle.LicensePlateNumber)" />
            </div>
        </div>
        <div class="form-group">
            <label>Vin:</label>
            <div>
                <InputText @bind-Value="@vehicle.Vin" class="form-control" />
                <ValidationMessage For="@(() => vehicle.Vin)" />
            </div>
        </div>
        <div class="form-group">
            <label>Daily Rate:</label>
            <div>
                <InputNumber @bind-Value="@vehicle.RentalRate" class="form-control" />
                <ValidationMessage For="@(() => vehicle.RentalRate)" />
            </div>
        </div>
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">@ButtonText</button>
    }
    <BackToList Target="vehicles" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Vehicle vehicle { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    string UploadFileWarning;

    private IList<Make> makes;
    private IList<Model> models;
    private IList<Colour> colours;

    protected async override Task OnInitializedAsync()
    {
        makes = await _client.GetFromJsonAsync<List<Make>>($"{Endpoints.MakesEndpoint}");
        models = await _client.GetFromJsonAsync<List<Model>>($"{Endpoints.ModelsEndpoint}");
        colours = await _client.GetFromJsonAsync<List<Colour>>($"{Endpoints.ColoursEndpoint}");
    }


    private async void HandleFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var ext = System.IO.Path.GetExtension(file.Name);
            if (ext.ToLower().Contains("jpg")
            || ext.ToLower().Contains("png")
            || ext.ToLower().Contains("jpeg"))
            {
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                vehicle.ImageName = $"{picId}{ext}";
                vehicle.Image = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(vehicle.Image);

                UploadFileWarning = string.Empty;
            }
            else
            {
                UploadFileWarning = "Please select a valid image file (*.jpg | *.png)";
            }
        }
    }

}